#include <iostream>
#include <raylib.h>
#include <deque>
#include<vector>
#include <raymath.h>
#include<stdlib.h>

using namespace std;

//definindo cores baseado no RGBA
Color green = {173, 204, 156, 255};
Color darkGreen = {43, 51, 24, 255};

//declarando variáveis para tamanho da janela (tbm das paredes)
int celula1 = 25;
int celula2 = 25;
int tborda = 75;
int x = 800;

#define CONTROLE 2 //velocidade
static bool p_movimento = false; //controle para usuário fazer o movimento da cobra

//temporizador para controlar a velocidade do jogo e das maças 
struct Temporizador {
    double atualizacao = 0;
    bool evento(double intervalo) {
        double currentTime = GetTime();
        if (currentTime - atualizacao >= intervalo) {
            atualizacao = currentTime;
            return true;
        }
        return false;
    }
};

//declarando variáveis para alterar o tempo
Temporizador temp_jogo;
Temporizador temp_comida;
double t = 0.2;
bool aumenta_velocidade = false;


//Verifica se algum elemento está junto ao corpo da cobra
bool Elemento_Deque(Vector2 elemento, deque<Vector2> deque)
    {
        for (unsigned int i = 0; i < deque.size(); i++) {
            if (Vector2Equals(deque[i], elemento)) {
                return true;
            }
        }
        return false;
}

class Cobra
{
public:
    deque<Vector2> corpo = {Vector2{6, 9}, Vector2{5, 9}, Vector2{4, 9}};
    Vector2 direcao = {1, 0};
    bool aumentarcobra = false;

    void Desenho() {
        for (unsigned int i = 0; i < corpo.size(); i++)
        {
            float x = corpo[i].x;
            float y = corpo[i].y;
            Rectangle segmento = Rectangle{75 + x * 25, 75 + y * 25, (float)25, (float)25};
            DrawRectangleRounded(segmento, 0.5, 6, darkGreen);
        }
    }

    void Atualiza()
    {
        corpo.push_front(Vector2Add(corpo[0], direcao));
        if (aumentarcobra == true) {
            aumentarcobra = false;
        }
        else {
            corpo.pop_back();
        }
    }

    void Start_over(){
        corpo = {Vector2{6, 9}, Vector2{5, 9}, Vector2{4, 9}};
        direcao = {1, 0};
        t = 0.20;
    }
};

class Comida
{
public:
    Vector2 posicao;
    Vector2 posicao2; //add
    Texture2D textura1, textura2; //add

    Comida(deque<Vector2> corpoCobra)
    {
        Image imagem = LoadImage("C:/Users/T-GAMER/Documents/game raylib/imagens/one_apple.png");
        Image imagem2 = LoadImage("C:/Users/T-GAMER/Documents/game raylib/imagens/two_apple.png");
        textura1 = LoadTextureFromImage(imagem);
        textura2 = LoadTextureFromImage(imagem2); //add
        UnloadImage(imagem);
        UnloadImage(imagem2); //add
        posicao = PosicinarComponente(corpoCobra);
        posicao2 = PosicinarComponente(corpoCobra); //add
    }

    ~Comida()
    {
        UnloadTexture(textura1);
        UnloadTexture(textura2);
    }

    void Desenho()
    {
        DrawTexture(textura1, 75 + posicao.x * 25, 75 + posicao.y * 25, RED);
    }

    void Desenho2 ()
    {
        DrawTexture(textura2, 75+ posicao2.x * 25, 75 + posicao2.y * 25, VIOLET); //add
    }    

    Vector2 GerarComponenteAleatoriamente()
    {
        float x = GetRandomValue(0, celula2 - 1);
        float y = GetRandomValue(0, celula2 - 1);
        return Vector2{x, y};
    }

    Vector2 PosicinarComponente(deque<Vector2> corpoCobra) 
    {
        Vector2 position = GerarComponenteAleatoriamente();
        while (Elemento_Deque(position, corpoCobra))
        {
            position = GerarComponenteAleatoriamente();
        }
        return position;
    }
};

class Obstacles
{
public:
struct Obstaculo {
        Rectangle retang;
        Obstaculo(float x, float y, float width, float height){
            retang.x = x;
            retang.y = y;
            retang.height = height;
            retang.width = width;
        }
    };

    Rectangle parede = {120, 100, (float)celula1, (float)celula1}; 
    vector<Obstaculo*> obstacles; 
   
    Vector2 novaPosicao;

    void gerar_obstaculo(deque<Vector2> corpoCobra) {
    // Gera uma posição válida que não colida com a cobra ou outros obstáculos
        do {
        float x = GetRandomValue(0, celula2 - 1) * celula1 + tborda;
        float y = GetRandomValue(0, celula2 - 1) * celula1 + tborda;
        novaPosicao = Vector2{x, y};
    } while (Elemento_Deque(Vector2{(novaPosicao.x - tborda) / celula1, (novaPosicao.y - tborda) / celula1}, corpoCobra) ||
             check_obstacle_collision(novaPosicao));

    // Cria um novo obstáculo
        obstacles.push_back(new Obstaculo(novaPosicao.x, novaPosicao.y, (float)celula1, (float)celula1));
    }

    // Função auxiliar para verificar colisões com obstáculos existentes
    bool check_obstacle_collision(Vector2 novaPosicao) {
        for (auto& obst : obstacles) {
            if (CheckCollisionRecs(Rectangle{novaPosicao.x, novaPosicao.y, (float)celula1, (float)celula1}, obst->retang)) {
                return true;
            }
        }
        return false;
    }

    // Função para desenhar os obstáculos
    void desenhar() {
        for (auto& obst : obstacles) {
            DrawRectangleRec(obst->retang , BLACK);  // Desenha o retângulo
        }
    }
    ~Obstacles() {
    for (auto& obst : obstacles) {
        delete obst;
    }
}
};

class Game
{
public:
    Cobra cobra = Cobra();
    Comida comida = Comida(cobra.corpo);
    Obstacles obstaculo = Obstacles();

    Sound som_comida;
    Sound som_gameover;
    Sound som_maca2;

    float tempo_pass =0.0f;
    float interv = 65.0f;

    float time = GetTime();
    bool running = true;
    int score = 0;

    Rectangle cabeca_cobra = {
            75 + cobra.corpo[0].x * 25, // Converte a posição da cabeça para pixels
            75 + cobra.corpo[0].y * 25,
            (float)25,
            (float)25
    };

    Game()
    {
        InitAudioDevice();
        som_comida = LoadSound("C:/Users/T-GAMER/Documents/game raylib/componentes_audio/come_maca.mp3");
        som_gameover = LoadSound("C:/Users/T-GAMER/Documents/game raylib/componentes_audio/gameover.mp3");
        som_maca2 = LoadSound("C:/Users/T-GAMER/Documents/game raylib/componentes_audio/campo_diminui.mp3");
    }

    ~Game()
    {
        UnloadSound(som_comida);
        UnloadSound(som_gameover);
        UnloadSound(som_maca2);
        CloseAudioDevice();
    }

    void Draw()
    {
        comida.Desenho();
        comida.Desenho2(); //ADD
        cobra.Desenho();
        obstaculo.desenhar();
    }

    void Atualiza()
    {
        if (running)
        {
            cobra.Atualiza();
            Aumentar_cobra();
            verifica(comida.posicao, obstaculo.novaPosicao);
            verifica(comida.posicao2, obstaculo.novaPosicao);
            Posiciona_comida(troca);
            Colisao_paredes();
            Colisao_cobra();
            if (score % 2 == 0){
                atualizar(time);
            }
        }
    }

     // Função para atualizar o tempo e gerar obstáculos
    void atualizar(float deltaTime) {
        tempo_pass += deltaTime;  // Acumula o tempo passado

        // Se o intervalo de tempo tiver passado, gera um novo obstáculo
        if (tempo_pass >= interv) {
            obstaculo.gerar_obstaculo(cobra.corpo);
            tempo_pass = 0.0f;  // Reinicia o contador de tempo
        }
    }

    bool troca = false;
    void verifica (Vector2 comidaposicao, Vector2 obstaculoposicao){
        int result = Vector2Equals(comida.posicao, obstaculo.novaPosicao);                              
            if (result == 0 ){
                troca = true;
            }
           troca = false;
    }

    void Posiciona_comida(bool fator){
        if (fator == true){
            comida.posicao = comida.PosicinarComponente(cobra.corpo);
            comida.posicao2 = comida.PosicinarComponente(cobra.corpo);    //add
                }
        else{
            if(temp_comida.evento(6.75))
            {
                if (!cobra.aumentarcobra) { // Só troca se a comida não foi comida
                comida.posicao = comida.PosicinarComponente(cobra.corpo);
                comida.posicao2 = comida.PosicinarComponente(cobra.corpo);    //add
                }
            }
        }

    }
  
    short int c = -1;
    bool y = false;
    void Recalcula_centro(){
        int a = GetScreenWidth();
       
        // Redefine as bordas para centralizar o quadro
        tborda = (a - celula2 * celula1) / 2;
    }
    void Aumentar_cobra() {
        // Verifica se a cobra consumiu a comida
        if (Vector2Equals(cobra.corpo[0], comida.posicao) ) {
            comida.posicao = comida.PosicinarComponente(cobra.corpo);
            cobra.aumentarcobra = true; 
            score++;   
            PlaySound(som_comida); 
        }
       if (Vector2Equals(cobra.corpo[0], comida.posicao2)) //add
       {
            comida.posicao2 = comida.PosicinarComponente(cobra.corpo); 
            tborda += 5;
            celula1 -= 2; 
            y = true;
            c++;
            Recalcula_centro();
            score++;
            PlaySound(som_maca2);
       }
    }
    void Colisao_paredes()
    {
        cabeca_cobra = {
        tborda + cobra.corpo[0].x * celula1,
        tborda + cobra.corpo[0].y * celula1,
        (float)celula1,
        (float)celula1
        };

        if (y == true){
            if (cobra.corpo[0].x == celula1 || cobra.corpo[0].x == 0 + c || 
            cobra.corpo[0].y == celula1 || cobra.corpo[0].y ==  0 + c) {
            GameOver();
        }
        else{
            if (cobra.corpo[0].x == celula2 || cobra.corpo[0].x == - 1 || 
            cobra.corpo[0].y == celula2 || cobra.corpo[0].y ==  - 1) {
            GameOver();
        }
        }

        }
        //colisao com os obstaculos (dinamicamente)
        for (auto& obst : obstaculo.obstacles) {
            if (CheckCollisionRecs(cabeca_cobra, obst->retang)) {
                GameOver();
            }
        }
    }
    
    void GameOver()
    {
        cobra.Start_over();
        comida.posicao = comida.PosicinarComponente(cobra.corpo);
        comida.posicao2 = comida.PosicinarComponente(cobra.corpo); //add
        running = false;
        score = 0;
        obstaculo.obstacles.clear();
        tborda = 75;
        celula1 = 25;
        x = 800;
        PlaySound(som_gameover);
    }

    void Colisao_cobra()
    {
        deque<Vector2> corpo_scabeca = cobra.corpo;
        corpo_scabeca.pop_front();
        if (Elemento_Deque(cobra.corpo[0], corpo_scabeca))
        {
            GameOver();
        }
    }
};

int main()
{
    cout << "Comecando o jogo..." << endl;
    InitWindow(x, x, "Game");
    SetTargetFPS(60);
    Game game = Game();

    while (WindowShouldClose() == false)
    {
        BeginDrawing();

        if (temp_jogo.evento(t)) 
        {
            p_movimento = true;
            game.Atualiza();
        }

        // Checar se o score é múltiplo de "controle"
        if (game.score % CONTROLE == 0 && game.score > 0) 
        {
            if (!aumenta_velocidade) // Evita aumentar a velocidade mais de uma vez
            {
                t -= 0.01275; // Reduz o tempo para aumentar a velocidade
                aumenta_velocidade = true; // Marca que a velocidade já foi ajustada
            }
        } 
        else {
            aumenta_velocidade = false; // Reseta para próximas verificações
        }
        
       
        if (IsKeyPressed(KEY_UP) && game.cobra.direcao.y != 1 && p_movimento)
        {
            game.cobra.direcao = {0, -1};
            game.running = true;
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_DOWN) && game.cobra.direcao.y != -1 && p_movimento)
        {
            game.cobra.direcao = {0, 1};
            game.running = true;
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_LEFT) && game.cobra.direcao.x != 1 && p_movimento)
        {
            game.cobra.direcao = {-1, 0};
            game.running = true;
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_RIGHT) && game.cobra.direcao.x != -1 && p_movimento)
        {
            game.cobra.direcao = {1, 0};
            game.running = true;
            p_movimento = false;
        }

        ClearBackground(green);
        DrawRectangleLinesEx(Rectangle{(float)tborda - 5, (float)tborda - 5, (float)celula1
        * celula2 + 10, (float)celula1 * celula2 + 10}, 5, darkGreen);
        DrawText("Snake Game Extendido", tborda - 5, 20, 40, darkGreen);
        DrawText(TextFormat("Score atual -> %i", game.score), tborda - 5, tborda + celula1 * celula2 + 10, 40, darkGreen);
        game.Draw();

        EndDrawing();
    }
    CloseWindow();
    return 0;
}
