#include <iostream>
#include <raylib.h>
#include <deque>
#include<vector>
#include <raymath.h>

#define TOTAL_BLOCOS 15
using namespace std;

//definindo cores baseado no RGBA
Color green = {173, 204, 156, 255};
Color darkGreen = {43, 51, 24, 255};

//declarando variáveis para tamanho da janela (tbm das paredes)
int celula_tam = 25;
int celula2 = 25;
int tborda = 75;

#define CONTROLE 2 //velocidade
static bool p_movimento = false; //controle para usuário fazer o movimento da cobra

//temporizador para controlar a velocidade do jogo e das maças 
struct Temporizador {
    double atualizacao = 0;
    bool evento(double intervalo) {
        double currentTime = GetTime();
        if (currentTime - atualizacao >= intervalo) {
            atualizacao = currentTime;
            return true;
        }
        return false;
    }
};

//declarando variáveis para alterar o tempo
Temporizador temp_jogo;
Temporizador temp_comida;
Temporizador temp_obst;
double t = 0.2;
bool aumenta_velocidade = false;


//Verifica se algum elemento está junto ao corpo da cobra
bool Elemento_Deque(Vector2 elemento, deque<Vector2> deque)
    {
        for (unsigned int i = 0; i < deque.size(); i++) {
            if (Vector2Equals(deque[i], elemento)) {
                return true;
            }
        }
        return false;
}

class Cobra
{
public:
    deque<Vector2> corpo = {Vector2{6, 9}, Vector2{5, 9}, Vector2{4, 9}}; //pos inicial
    Vector2 direcao = {1, 0};
    bool aumentarcobra = false;

    void Desenho() {
        //percorre os segmentos 
        for (unsigned int i = 0; i < corpo.size(); i++) {
            float x = corpo[i].x;
            float y = corpo[i].y;
            Rectangle segmento = Rectangle{tborda + x * celula_tam, tborda + y * celula_tam, (float)celula_tam, (float)celula_tam};
            DrawRectangleRounded(segmento, 0.5, 6, darkGreen);
        }
    }

    void Atualiza()
    {
        corpo.push_front(Vector2Add(corpo[0], direcao)); //adiciona um elemento
        if (aumentarcobra == true) {
            aumentarcobra = false;
        }
        else {
            corpo.pop_back();
        }
    }

    void Start_over(){
        corpo = {Vector2{6, 9}, Vector2{5, 9}, Vector2{4, 9}};
        direcao = {1, 0};
        t = 0.20;
    }
};

class Comida
{
public:
    Vector2 posicao;
    Texture2D textura;

    Comida(deque<Vector2> corpoCobra)
    {
        Image imagem = LoadImage("C:/Users/T-GAMER/Documents/game raylib/imagens/one_apple.png");
        textura = LoadTextureFromImage(imagem);
        UnloadImage(imagem);
        posicao = PosicinarComponente(corpoCobra);
    }

    ~Comida()
    {
        UnloadTexture(textura);
    }

    void Desenho()
    {
        DrawTexture(textura, tborda + posicao.x * celula_tam, tborda + posicao.y * celula_tam, RED);
    }
    
    Vector2 GerarComponenteAleatoriamente()
    {
        float x = GetRandomValue(0, celula2 - 1);
        float y = GetRandomValue(0, celula2 - 1);
        return Vector2{x, y};
    }

    Vector2 PosicinarComponente(deque<Vector2> corpoCobra) 
    {
        Vector2 position = GerarComponenteAleatoriamente();
        while (Elemento_Deque(position, corpoCobra))
        {
            position = GerarComponenteAleatoriamente();
        }
        return position;
    }
};

class Obstacles
{
public:
struct Obstaculo {
        Rectangle retang;
        Obstaculo(float x, float y, float width, float height){
            retang.x = x;
            retang.y = y;
            retang.height = height;
            retang.width = width;
        }
    };

    Rectangle parede = {120, 100, (float)celula_tam, (float)celula_tam}; // tam fixo paredes
    vector<Obstaculo*> obstacles; 
   
    Vector2 novaPosicao; // x e y

    void gerar_obstaculo(deque<Vector2> corpoCobra) {
        //controle da quantidade de obstaculos
        if (obstacles.size() >= TOTAL_BLOCOS){
            return;
        }
        
        do {
        // gear posição válida que não colida com a cobra ou outros obstáculos
        float x = GetRandomValue(0, celula2 - 1) * celula_tam + tborda;
        float y = GetRandomValue(0, celula2 - 1) * celula_tam + tborda;
        novaPosicao = Vector2{x, y};
        } while (Elemento_Deque(Vector2{(novaPosicao.x - tborda) / celula_tam, (novaPosicao.y - tborda) / celula_tam}, corpoCobra) ||
            check_obstacle_collision(novaPosicao));
        //cria novo obstáculo
        obstacles.push_back(new Obstaculo(novaPosicao.x, novaPosicao.y, (float)celula_tam, (float)celula_tam));
    }

   

    // Função auxiliar para verificar colisões com obstáculos existentes
    bool check_obstacle_collision(Vector2 novaPosicao) {
        for (auto& obst : obstacles) {
            if (CheckCollisionRecs(Rectangle{novaPosicao.x, novaPosicao.y, (float)celula_tam, (float)celula_tam}, obst->retang)) {
                return true;
            }
        }
        return false;
    }

    // Função para desenhar os obstáculos
    void desenhar() {
        for (auto& obst : obstacles) {
            DrawRectangleRec(obst->retang , BLACK);  // Desenha o retângulo
        }
    }
    ~Obstacles() {
    for (auto& obst : obstacles) {
        delete obst; //liberando a memoria
    }
}
};

class Game
{
public:
    Cobra cobra = Cobra();
    Comida comida = Comida(cobra.corpo);
    Obstacles obstaculo = Obstacles();

    //variaveis de som
    Sound som_comida;
    Sound som_gameover;

    //variavel de tempo
    float time = 4.0f;

    //controle do jogo e score
    bool running = true;
    int score = 0;

    Rectangle cabeca_cobra = {
            tborda + cobra.corpo[0].x * celula_tam, // Converte a posição da cabeça para pixels
            tborda + cobra.corpo[0].y * celula_tam,
            (float)celula_tam,
            (float)celula_tam
    };

    Game()
    {
        InitAudioDevice();
        som_comida = LoadSound("C:/Users/T-GAMER/Documents/game raylib/componentes_audio/come_maca.mp3");
        som_gameover = LoadSound("C:/Users/T-GAMER/Documents/game raylib/componentes_audio/gameover.mp3");
    }

    ~Game()
    {
        UnloadSound(som_comida);
        UnloadSound(som_gameover);
        CloseAudioDevice();
    }

    void Draw()
    {
        comida.Desenho();
        cobra.Desenho();
        obstaculo.desenhar();
    }

    void Atualiza()
    {
        if (running)
        {
            cobra.Atualiza();
            Verifica(comida.posicao, obstaculo.novaPosicao); //verifica local da maça
            Aumentar_cobra(); 
            Posiciona_comida(troca);
            Colisao_paredes();
            Colisao_cobra();
            Atualizar_obt(time);
        }
    }

    // função para atualizar o tempo e gerar obstáculos
    void Atualizar_obt(float deltaTime) {
        if(temp_obst.evento(deltaTime)){
            obstaculo.gerar_obstaculo(cobra.corpo);
        }
    }

    //verifica se a maça esta atras de um obstaculo de lugar
    bool troca = false;
    void Verifica (Vector2 comidaposicao, Vector2 obstaculoposicao){
        int result = Vector2Equals(comida.posicao, obstaculo.novaPosicao);                              
        if (result == 0 ){
                troca = true;
            }
        troca = false;
    }

    void Posiciona_comida(bool fator){
        if (fator == true){
            comida.posicao = comida.PosicinarComponente(cobra.corpo); //troca de lugar
        }
        else{
            if(temp_comida.evento(6.75)) {
                if (!cobra.aumentarcobra)  // Só troca se a comida não foi comida em um intervalo
                comida.posicao = comida.PosicinarComponente(cobra.corpo);
            }
        }
    }
  
    void Aumentar_cobra() {
        // Verifica se a cobra consumiu a comida
        if (Vector2Equals(cobra.corpo[0], comida.posicao)) {
            comida.posicao = comida.PosicinarComponente(cobra.corpo);
            cobra.aumentarcobra = true; 
            score++; 
            PlaySound(som_comida); 
        }
    }
    void Colisao_paredes()
    {
        cabeca_cobra = {
        tborda + cobra.corpo[0].x * celula_tam,
        tborda + cobra.corpo[0].y * celula_tam,
        (float)celula_tam,
        (float)celula_tam
        };

        // Colisão com a parede (borda fixa)
        if (cobra.corpo[0].x == celula2 || cobra.corpo[0].x == -1 || 
            cobra.corpo[0].y == celula2 || cobra.corpo[0].y == -1) {
            GameOver();
        }
        //colisao com os obstaculos (dinamicamente)
        for (auto& obst : obstaculo.obstacles) {
            if (CheckCollisionRecs(cabeca_cobra, obst->retang)) {
                GameOver();
            }
        }
    }
    
    void GameOver()
    {
        cobra.Start_over(); //pos inicial e tempo inicial
        running = false; //atualização nao ocorre
        score = 0;
        obstaculo.obstacles.clear(); //tira os obstaculos 
        PlaySound(som_gameover);
    }

    void Colisao_cobra()
    {
        deque<Vector2> corpo_scabeca = cobra.corpo; 
        corpo_scabeca.pop_front();//retira a cabeça da cobra
        if (Elemento_Deque(cobra.corpo[0], corpo_scabeca)) {
            GameOver();
        }
    }
};

int main()
{
    cout << "Comecando o jogo..." << endl;
    InitWindow(2 * tborda + celula_tam * celula2, 2 * tborda + celula_tam * celula2, "Game");
    SetTargetFPS(60);
    Game game = Game();

    while (WindowShouldClose() == false)
    {
        BeginDrawing();

        if (temp_jogo.evento(t)) {
            p_movimento = true;
            game.Atualiza();
        }

        // Checar se o score é múltiplo de "controle"
        if (game.score % CONTROLE == 0 && game.score > 0) {
            if (!aumenta_velocidade) // evita aumentar a velocidade dnv
            {
                t -= 0.01275; 
                aumenta_velocidade = true; 
            }
        } 
        else {
            aumenta_velocidade = false; // Reseta para próximas verificações
        }
        
       
        if (IsKeyPressed(KEY_UP) && game.cobra.direcao.y != 1 && p_movimento)
        {
            game.cobra.direcao = {0, -1};
            game.running = true;
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_DOWN) && game.cobra.direcao.y != -1 && p_movimento)
        {
            game.cobra.direcao = {0, 1};
            game.running = true;
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_LEFT) && game.cobra.direcao.x != 1 && p_movimento)
        {
            game.cobra.direcao = {-1, 0};
            game.running = true;
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_RIGHT) && game.cobra.direcao.x != -1 && p_movimento)
        {
            game.cobra.direcao = {1, 0};
            game.running = true;
            p_movimento = false;
        }

        ClearBackground(green);
        DrawRectangleLinesEx(Rectangle{(float)tborda - 5, (float)tborda - 5, (float)celula_tam
        * celula2 + 10, (float)celula_tam * celula2 + 10}, 5, darkGreen);
        DrawText("Snake Game Extendido", tborda - 5, 20, 40, darkGreen);
        DrawText(TextFormat("Score atual -> %i", game.score), tborda - 5, tborda + celula_tam * celula2 + 10, 40, darkGreen);
        game.Draw();

        EndDrawing();
    }
    CloseWindow();
    return 0;
}
