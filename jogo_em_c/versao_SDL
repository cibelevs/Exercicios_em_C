#include <SDL2/SDL.h>
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
#include<stdbool.h>

#if 0
#define WINDOW_X 0
#define WINDOW_Y 0
#define WINDOW_WIDTH 1920
#define WINDOW_HEIGHT 1080
#else
#define WINDOW_X 100
#define WINDOW_Y 100
#define WINDOW_WIDTH 1024
#define WINDOW_HEIGHT 768
#endif // 0

#define GRID_SIZE 19
#define GRID_DIM 270


enum{SNAKE_UP, SNAKE_DOWN, SNAKE_RIGHT, SNAKE_LEFT};

struct snake {
    int x, y;
    int dir;

    struct snake *next;
};
typedef struct snake Snake;

Snake *head;
Snake *tail;


void init_snake()
{
       Snake *new_s = malloc(sizeof(Snake));

    new_s->x =  (GRID_SIZE/2);
    new_s->y =  (GRID_SIZE/2) ;
    new_s->dir = SNAKE_UP;
    new_s->next = NULL;

    head = new_s;
    tail = new_s;

    return;
}

void increase_snake()
{
   Snake *new_s = malloc (sizeof(Snake));
   switch (tail->dir)
   {
    case SNAKE_UP:
     new_s-> x = tail->x;
     new_s-> y = tail-> y + 1;
    break;
    case SNAKE_DOWN:
     new_s-> x = tail->x;
     new_s-> y = tail-> y - 1;
    break;
    case SNAKE_LEFT:
     new_s-> x = tail->x + 1;
     new_s-> y = tail-> y;
    break;
    case SNAKE_RIGHT:
    new_s-> x = tail->x - 1;
     new_s-> y = tail-> y;
    break;
   }

   new_s->next = NULL;
   tail->next = new_s;

   tail = new_s;


    return;
}

void render_snake(SDL_Renderer *renderer, int x, int y)
{
    SDL_SetRenderDrawColor(renderer, 0x00, 0xff, 0x00, 255);

    int seg_size = GRID_DIM/GRID_SIZE;
    SDL_Rect seg;
    seg.w = seg_size;
    seg.h = seg_size;

    Snake *track = head;

    while(track != NULL)
    {
        seg.x = x + track->x * seg_size;
        seg.y = y + track->y * seg_size;

        SDL_RenderFillRect(renderer, &seg);

        track = track->next;
    }

    return;
}

void move_snake()
{
    int prev_x = head-> x;
    int prev_y = head-> y;
    int prev_dir = head->dir;

    switch (head-> dir){
        case SNAKE_UP:
        head-> y--;
        break;
        case SNAKE_DOWN:
        head->y++;
        break;
         case SNAKE_LEFT:
        head->x--;
        break;
        case SNAKE_RIGHT:
        head->x++;
        break;
    }

    Snake *track = head;
    if(track->next != NULL)
    {
        track = track->next;
    }

    while(track!=NULL)
    {
        int save_x = track->x;
        int save_y = track->y;
        int save_dir = track -> dir;

        track->x = prev_x;
        track->y = prev_y;
        track->dir = prev_dir;
        track = track->next;

        prev_x = save_x;
        prev_y = save_y;
        prev_dir = save_dir;
    }



}

struct {
    int x, y;
} apple;

typedef struct apple Apple;


void gen_apple()
{
   bool in_snake;

  do
   {
        while (apple.x == head->x && apple.y == head->y)
        {
            apple.x = rand() % GRID_SIZE;
            apple.y = rand() % GRID_SIZE;
        }
       in_snake = false;

        Snake *track = head;

        while(track != NULL)
        {
            if(track->x == apple.x && track->y == apple.y)
            {
                in_snake = true;
            }
          track = track->next;
        }
   } while (in_snake);
}

void render_apple(SDL_Renderer *renderer, int x, int y)
{
   SDL_SetRenderDrawColor(renderer, 0xff, 0x00, 0x00, 255);

    int apple_size = GRID_DIM / GRID_SIZE;
    SDL_Rect app;
    app.w = apple_size;
    app.h = apple_size;
    app.x = x + apple.x * apple_size;
    app.y = y + apple.y * apple_size;

    SDL_RenderFillRect(renderer, &app);
}

void detect_apple()
{
    if(head->x == apple.x && head->y == apple.y)
    {
        gen_apple();
        increase_snake();
    }

return;
}


 void render_grid (SDL_Renderer *renderer, int x, int y)
   {
       SDL_SetRenderDrawColor(renderer,233, 86, 171, 255);
       #if 0
        int cell_size = GRID_DIM/GRID_SIZE;

       SDL_Rect cell;
       cell.w = cell_size;
       cell.h = cell_size;

       int i, c;

       for (i=0; i<GRID_SIZE; i++)
       {
           for (c=0; c<GRID_SIZE;c++)
           {
               cell.x = x + (i * cell_size);
               cell.y = y + (c * cell_size);
               SDL_RenderDrawRect(renderer, &cell);
           }
       }
       #else
       SDL_Rect outline;
       outline.x = x;
       outline.y = y;
       outline.h = GRID_DIM;
       outline.w = GRID_DIM;

       SDL_RenderDrawRect(renderer, &outline);
       #endif // 0
   }

   void detect_crash (bool *game)
   {
       if (head->x < 0 || head->x >= GRID_SIZE
           || head-> y < 0||head->y >= GRID_SIZE) {
           *game = false;
       }
       Snake *track = head;

       if (track->next != NULL)
       {
           track = track->next;
       }

       while (track != NULL)
       {
           if (track ->x == head->x && track->y==head->y)
           {
               *game = false;
           }
        track = track -> next;
       }
   }





int main(int argc, char **argv)
{

    srand(time(0));

    init_snake();


    for (int i = 0; i < 3; i++){
        increase_snake();
    }
    gen_apple();


    SDL_Window *window;
    SDL_Renderer *renderer;

    // Inicializar SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {  // Corrigido: chamada correta de SDL_Init
        fprintf(stderr, "ERROR: SDL_Init failed: %s\n", SDL_GetError());
        return -1;
    }

    // Criar a janela
    window = SDL_CreateWindow(
        "Cobra",
        WINDOW_X,
        WINDOW_Y,
        WINDOW_WIDTH,
        WINDOW_HEIGHT,
        SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE
    );

    if (!window) {
        fprintf(stderr, "ERROR: Failed to create window: %s\n", SDL_GetError());
        SDL_Quit();
        return -1;
    }

    // Criar o renderizador
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    if (!renderer) {
        fprintf(stderr, "ERROR: Failed to create renderer: %s\n", SDL_GetError());
        SDL_DestroyWindow(window);
        SDL_Quit();
        return -1;
    }

    int grid_x = (WINDOW_WIDTH/ 2) - (GRID_DIM / 2);
    int grid_y = (WINDOW_HEIGHT/ 2) - (GRID_DIM / 2);


    bool quit = false;
    SDL_Event event;
    bool game_running = true;

    while (!quit)
    {
        while (SDL_PollEvent(&event))
        {
            switch(event.type)
            {
                case SDL_QUIT: quit = true;
                break;
                case SDL_KEYUP:
                break;
                case SDL_KEYDOWN:
                switch (event.key.keysym.sym)
                {
                    case SDLK_ESCAPE:
                    quit = true;
                    break ;
                    case SDLK_UP:
                        if(head->dir != SNAKE_DOWN)
                        head->dir = SNAKE_UP;
                    break;
                    case SDLK_DOWN:
                        if(head->dir != SNAKE_UP)
                        head->dir = SNAKE_DOWN;
                    break;
                    case SDLK_LEFT:
                        if(head->dir != SNAKE_RIGHT)
                        head->dir = SNAKE_LEFT;
                    break;
                    case SDLK_RIGHT:
                        if(head->dir != SNAKE_LEFT)
                        head->dir = SNAKE_RIGHT;
                    break;
                }
                break;
            }
        }
        // Definir a cor de renderização (verde)
        SDL_RenderClear(renderer); // Limpa a tela

        move_snake();
        detect_apple();
        detect_crash(&game_running);

        if (!game_running) {
            SDL_Delay(200);
            quit = true;
        }

        for(int i = 0; i<3; i++)
        {render_grid(renderer, grid_x, grid_y);}

        render_snake(renderer, grid_x, grid_y);
        render_apple(renderer, grid_x, grid_y);


        SDL_SetRenderDrawColor(renderer, 0x11, 0x11, 0x11, 255); // Verde com transparência máxima
        SDL_RenderPresent(renderer); // Apresenta o conteúdo da tela

        SDL_Delay(100);
    }

    // Destruir o renderizador e a janela
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}

