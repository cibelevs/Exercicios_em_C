#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
#include<windows.h>
//##########################
//#                        #
//#                        #
//#                        #
//#                        #
//#      x                 #
//#                        #
//#                        #
//#         @****          #
//#                        #
//#                        #
//#                        #
//#                        #
//##########################

#define LINHA 10
#define COLUNA 20
#define TAM_MAX_COBRA 200
#define FOOD 10

void resetar()
{
    printf("\033[H");
}


int gameover = 0;
//vetor unidimensional para facilitar o armazenamento
char mapa_jogo[COLUNA*LINHA];


//função permite que o mapa começe vazio,
//para depois preencher e imprimir as bordas
void incializando_mapa()
{
    int i;
    for (i=0; i<COLUNA*LINHA;i++)
    {
        mapa_jogo[i] = ' ';
    }
}

//montando função para delimitar as bordas do mapa
void montar_bordas()
{
   int x, y;

   for (y=0; y<LINHA;y++)  {
     for (x=0; x<COLUNA; x++) {
        if (x ==0||y ==0||x ==COLUNA-1||y ==LINHA-1) {
            mapa_jogo[y*COLUNA + x] = '#'; //preenchendo borda
        }
        else {
            mapa_jogo[y*COLUNA + x] = ' '; //oque n é borda preenche com espaço vazio
        }
     }
   }
}
//imprimindo as bordas
void imprimir_bordas()
{
  int x, y;

   for (y=0; y<LINHA;y++) {
     for (x=0; x<COLUNA; x++) {
       putchar ( mapa_jogo[y*COLUNA+x]); //troquei o putch por putchar
     }
     putchar('\n');
   }
}
//comida
struct comida{
    int x;
    int y;
    int consumido;
};
struct comida Comida[FOOD];
//comida da cobra

void inicializando_comida()
{
    int i;
    for (i=0; i<FOOD; i++)
    {
      Comida[i].x = 1 + rand()  % (COLUNA - 2); //returns to a pseudo_random
      Comida[i].y = 1 + rand() % (LINHA - 2);
      Comida[i].consumido = 0;
    }
}

void colocar_comida()
{
   int i;

    for (i = 0; i < FOOD; i++)
    {
        if (!Comida[i].consumido)
        {
            // Ajuste no acesso à posição do mapa
            mapa_jogo[Comida[i].y * COLUNA + Comida[i].x] = '+';
        }

    }
}

//cobra

struct partes_cobra{
    int a; //eixo X da cobra
    int b; //eixo Y da cobra
};

struct cobra{
    int tamanho; //numero de elemnetos = cabeça+corpo
    struct partes_cobra corpo_cobra[TAM_MAX_COBRA]; //definindo vetor com tamanho máximo da cobra

};

struct cobra Cobra;

void inicializando_cobra()
{
   Cobra.tamanho = 1;
   Cobra.corpo_cobra[0].a = 1 + rand()  % (COLUNA - 2); //cabeça da cobra
   Cobra.corpo_cobra[0].b = 1 + rand()  % (COLUNA - 2);

}

void desenho_cobra()
{
    int i;
    // Desenhando o corpo da cobra (da cauda até a cabeça, exceto a cabeça)
    for (i = Cobra.tamanho - 1; i > 0; i--)
    {
        mapa_jogo[Cobra.corpo_cobra[i].b * COLUNA + Cobra.corpo_cobra[i].a] = '*'; // Definindo o corpo
    }
    // Desenhando a cabeça da cobra
    mapa_jogo[Cobra.corpo_cobra[0].b * COLUNA + Cobra.corpo_cobra[i].a] = '@'; // Definindo a cabeça
}



void mover_cobra(int X, int Y)
{
    int i;
    //corpo seguindo a cabeça da cobra, de acordo com as direções de X e Y
     for(i = Cobra.tamanho-1; i>0; i--) {
         Cobra.corpo_cobra[i] =  Cobra.corpo_cobra[i - 1];
     }
    Cobra.corpo_cobra[0].a += X;
    Cobra.corpo_cobra[0].b += Y;
}

//lendo o teclado
void teclado_acoes()
{
    int movimento = getch();
    switch (movimento) {
        case 'w': mover_cobra(0, -1); //movendo para cima
        break;

        case 's': mover_cobra(0, 1); //movendo para baixo
        break;

        case 'a': mover_cobra(-1, 0); //movendo para esquerda
        break;

        case 'd': mover_cobra(1, 0);//movendo para direita
        break;
    }
}

// Função de atraso usando um loop (menos eficiente)
void delay(int milliseconds) {
    clock_t start_time = clock();
    while (clock() < start_time + milliseconds);
}


//int main (int argc, char **argv)

void jogando()
{
    int i;

    for (i=0; i<FOOD; i++)
    {
        if (!Comida[i].consumido)
        {
            if(Comida[i].x == Cobra.corpo_cobra[0].a && Comida[i].y == Cobra.corpo_cobra[0].b)
            {
                Comida[i].consumido = 1;
                Cobra.tamanho++;
            }
        }
    }

        if (Cobra.corpo_cobra[0].a == 0 || Cobra.corpo_cobra[0].b == 0 ||
            Cobra.corpo_cobra[0].a == COLUNA -1 || Cobra.corpo_cobra[0].b == LINHA-1 )
        {
            gameover = 1;
        }


        for (i = 1; i < Cobra.tamanho; i++)
        {
            if (Cobra.corpo_cobra[0].a == Cobra.corpo_cobra[i].a && Cobra.corpo_cobra[0].b == Cobra.corpo_cobra[i].b)
            {
                gameover = 1;
            }
        }
}

int main ()
{
   srand(time(0));

   inicializando_cobra();
   inicializando_comida();
  //fazer isso enquanto jogo não acabou
   while (!gameover)
    {
      resetar();
      incializando_mapa();
      montar_bordas();
      colocar_comida();
      desenho_cobra();
      jogando();
      imprimir_bordas();
      printf("Score: %d\n", Cobra.tamanho); //pode colocar *100
      teclado_acoes();
      //proibe mover o teclado depois do jogo acabar
      delay(150);

    }

    printf("\nYou are a loser. Why? cuz you lost silly!");
    printf("\nFinal score: %d", Cobra.tamanho);

    return 0;
}
